public:
    bool isvalid(int i,int j,int n,vector<vector<int>>&m,vector<vector<int>>&vis){
        if(i<0 || i>=n || j<0 || j>=n || m[i][j]==0 || vis[i][j]==1){
            return false;
        }
        return true;
    }
    void solve(int i,int j,vector<vector<int>>&m,int n,string &path,vector<string>& ans,vector<vector<int>>&vis){
        if(i==n-1 && j==n-1){
            ans.push_back(path);
            return;
        }
        vis[i][j]=1;
        if(isvalid(i+1,j,n,m,vis)){
            path.push_back('D');
            solve(i+1,j,m,n,path,ans,vis);
            path.pop_back();
        }
        if(isvalid(i-1,j,n,m,vis)){
            path.push_back('U');
            solve(i-1,j,m,n,path,ans,vis);
            path.pop_back();
        }
        if(isvalid(i,j-1,n,m,vis)){
            path.push_back('L');
            solve(i,j-1,m,n,path,ans,vis);
            path.pop_back();
        }
        if(isvalid(i,j+1,n,m,vis)){
            path.push_back('R');
            solve(i,j+1,m,n,path,ans,vis);
            path.pop_back();
        }
        vis[i][j]=0;
    }
    vector<string> findPath(vector<vector<int>> &m, int n) {
        // Your code goes here
        vector<string>ans;
        string path="";
        if(m[0][0]==0)return ans;
        vector<vector<int>>vis(n,vector<int>(n,0));
        solve(0,0,m,n,path,ans,vis);
        return ans;
    }
