/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        //base case
        ListNode* temp = head;
        for(int i = 0; i < k; i++){
            if(temp == nullptr) return head;
            temp = temp->next;
        }
        //reverse first k nodes iteratively
        int cnt=0;
        ListNode* prev=NULL;
        ListNode* curr=head;
        ListNode* forward=NULL;
        while(curr!=NULL && cnt<k){
            forward=curr->next;
            curr->next=prev;    
            prev=curr;
            curr=forward;
            cnt++;
        }
        //make recursive call
        head->next=reverseKGroup(forward,k);
        return prev;
    }
};
