class LRUCache {
public:
    unordered_map<int,vector<int>>mp;
    int maxi;
    queue<int>q;
    LRUCache(int capacity) {
        maxi=capacity;
    }
    
    int get(int key) {
        if(mp.find(key)!=mp.end()){
            mp[key][1]++;
            q.push(key);
            return mp[key][0];
        }
        return -1;
    }
    
    void put(int key, int value) {
        if(mp.find(key)!=mp.end()){
            mp[key][0]=value;
            mp[key][1]++;
            q.push(key);
        }
        else{
            mp[key]={value,1};
            q.push(key);
        }
        if(mp.size()>maxi){
            while(q.size()){
                int ele=q.front();
                q.pop();
                mp[ele][1]--;
                if(mp[ele][1]==0){
                    mp.erase(ele);
                    break;
                }
            }
        }
    }
};

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache* obj = new LRUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */
