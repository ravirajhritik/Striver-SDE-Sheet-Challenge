class Solution {
private:
    bool issafe(int row,int col,vector<string> board,int n){
        int i=row;
        int j=col;
        //upper diagonal
        while(i>=0 && j>=0){
            if(board[i][j]=='Q')return false;
            i--;
            j--;
        }
        //lower diagonal
        i=row;
        j=col;
        while(i<n && j>=0){
            if(board[i][j]=='Q')return false;
            i++;
            j--;
        }
        //left row
        i=row,j=col;
        while(j>=0){
            if(board[i][j]=='Q')return false;
            j--;
        }
        return true;

    }
    void solve(int col,int n,vector<string>& board,vector<vector<string>>&ans){
        if(col==n){
            ans.push_back(board);
            return;
        }
        for(int row=0;row<n;row++){
            if(issafe(row,col,board,n)){
                board[row][col]='Q';
                solve(col+1,n,board,ans);
                board[row][col]='.';
            }
        }
    }
public:
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>>ans;
        vector<string>board(n);
        string s(n,'.');
        for(int i=0;i<n;i++){
            board[i]=s;
        }
        solve(0,n,board,ans);
        return ans;
    }
};
