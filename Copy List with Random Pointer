/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/

class Solution {
public:
    Node* copyRandomList(Node* head) {
        if(head==NULL)return head;
        //cloned the original list
        Node* temp=head->next;
        Node* clone=new Node(head->val);
        Node* clonehead=clone;
        while(temp!=NULL){
            Node* nodetoinsert=new Node(temp->val);
            clone->next=nodetoinsert;
            temp=temp->next;
            clone=clone->next;
        }
        clone->next=NULL;
        //mapping of original list to cloned list
        unordered_map<Node*,Node*>mapping;
        temp=head;
        clone=clonehead;
        while(temp!=NULL && clone!=NULL){
            mapping[temp]=clone;
            temp=temp->next;
            clone=clone->next;
        }
        temp=head;
        clone=clonehead;
        while(temp!=NULL && clone!=NULL){
            clone->random=mapping[temp->random];
            temp=temp->next;
            clone=clone->next;
        }
        return clonehead;
    }
};
